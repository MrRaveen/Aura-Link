    /* eslint-disable no-empty */
/* eslint-disable no-unused-vars */
import 'bootstrap/dist/css/bootstrap.min.css';
import '../CSS/index.css';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faHeart, faComment, faUser, faImages, faUsers, faUserPlus } from '@fortawesome/free-solid-svg-icons';
import StickyNavbar from '../Components/navBar.jsx';
import React,{useState,useEffect} from 'react'
import { useNavigate } from 'react-router-dom';
import UserAccountPersonal from '../Controller/UserAccountPersonal.jsx';

//TODO: use mappings - later
function AccountPage() {
    const UserAccObj = new UserAccountPersonal();
    const navigate = useNavigate();
     const navigateToImagePage = (dataObject) => {
        navigate('/ViewAllImages',{state : dataObject});
    }
    UserAccObj.getAccInfo().then(data => {
    document.getElementById('mainName').innerText = data.fname + " " + data.lname;
    document.getElementById('email').innerText = data.email;
    document.getElementById('postCount').innerText = data.postCount;
    document.getElementById('followersCount').innerText = data.followersCount;
    document.getElementById('followingCount').innerText = data.followingCount;
    document.getElementById('bio').innerText = data.bio;
    document.getElementById('job').innerText = "Job: "+data.job;
    document.getElementById('dob').innerText = "Date of birth: "+data.dob;
document.getElementById('profile_pic_url').innerHTML = `
    <img 
        src="${data.profile_pic_url}" 
        alt="Profile" 
        class="w-32 h-32 rounded-full border-4 border-white shadow-xl transform transition duration-300 hover:scale-105"
    />
`;
    });
    //posts
    var count = 0;
    const outPosts = UserAccObj.getAllPosts();
    console.log('Loading posts..');
    console.log(outPosts);
    outPosts.then(result => {
    const out3 = result.out3;//gets an array (post content table)
    const out1 = result.out1;//gets an array (main post table)
    const reaction = result.reaction;//gets an array
    out1.forEach(postHolder => {
        if(postHolder.content_type == "TEXT"){
            //no contents
            console.log('No contents');//FIXME: test
        }else{
            //append contents
            var requiredData = out3[count];//post contents array set
            var allReactions = reaction[count];
            if(requiredData.length > 1){
                console.log('Has higher contents');//FIXME: test
                //take the image of arr[0]
//                   const contents = document.createElement("div");
// contents.className = "relative group overflow-hidden rounded-xl shadow-md hover:shadow-xl transition duration-300";
// contents.innerHTML = `
//   <div class="relative w-full h-64">
//   <img
//     src="http://127.0.0.1:10000/devstoreaccount1/postcontents/${requiredData[0].media_name}"
//     alt="test"
//     class="w-full h-full object-cover"
//   />
//   <button value = ${JSON.stringify(requiredData[count])} id="viewAllImages" class="absolute left-2 bottom-2 z-10 bg-white bg-opacity-80 text-black p-2 rounded shadow">
//     View all images (${requiredData.length})
//   </button>
//     </div>
//     <div class="mt-2 items-center justify-center flex"><h3>${postHolder.title}</h3></div>
//     <div class="flex items-center justify-center">
//      <p class="text-center mb-1">${postHolder.description}</p>
//     </div>
//     <div class="flex items-center justify-center"><p class="text-center mb-1">${postHolder.date}</p></div>
//     <div class="flex items-center justify-center"><p class="text-center mb-1 mb-1">${postHolder.time}</p></div>  
//     <div class="bg-gray-200 flex space-x-4 items-center justify-center"><label>üëç ${allReactions.like}</label><label>üòÜ ${allReactions.laugh}</label><label>ü•∫ ${allReactions.sad}</label><label>‚ù§Ô∏è ${allReactions.love}</label></div>
//      <div class="bg-gray-200 flex space-x-4 items-center justify-center"><button>Comments üó®Ô∏è</button></div>
//     `;
// document.getElementById('contentGallery').appendChild(contents);
            }else{
                requiredData.forEach(contentJSONholder => {
                         const contents = document.createElement("div");
contents.className = "relative group overflow-hidden rounded-xl shadow-md hover:shadow-xl transition duration-300";
contents.innerHTML = `
    <div class="relative w-full h-64">
  <img
    src="http://127.0.0.1:10000/devstoreaccount1/postcontents/${contentJSONholder.media_name}"
    alt="test"
    class="w-full h-full object-cover"
  />
  <button id="viewAllImages" value = ${requiredData} class="absolute left-2 bottom-2 z-10 bg-white bg-opacity-80 text-black p-2 rounded shadow">
    View all images (${requiredData.length})
  </button>
    </div>
    <div class="mt-2 items-center justify-center flex"><h3>${postHolder.title}</h3></div>
    <div class="flex items-center justify-center">
     <p class="text-center mb-1">${postHolder.description}</p>
    </div>
    <div class="flex items-center justify-center"><p class="text-center mb-1">${postHolder.date}</p></div>
    <div class="flex items-center justify-center"><p class="text-center mb-1 mb-1">${postHolder.time}</p></div>  
    <div class="bg-gray-200 flex space-x-4 items-center justify-center"><label>üëç ${allReactions.like}</label><label>üòÜ ${allReactions.laugh}</label><label>ü•∫ ${allReactions.sad}</label><label>‚ù§Ô∏è ${allReactions.love}</label></div>
    <div class="bg-indigo-800">
    <button class="text-center">Comments üó®Ô∏è</button>
    </div>
    `;
     document.getElementById('contentGallery').appendChild(contents);
     document.getElementById('viewAllImages').addEventListener('click', ()=>navigateToImagePage(document.getElementById('viewAllImages').value));
                });
            }
        }
        count++;
    });
});
     return (
        <div>
            <StickyNavbar></StickyNavbar>
            <div className="min-h-screen bg-gray-50 flex flex-col lg:flex-row">
            {/* Sidebar/Profile Section */}
            <div className="w-full lg:w-1/4 bg-white p-8 shadow-lg lg:min-h-screen">
                <div className="flex flex-col items-center space-y-4">
                    <div className="relative group" id='profile_pic_url'>
                     
                        <div className="absolute inset-0 rounded-full border-2 border-transparent group-hover:border-pink-300 transition-all duration-300"></div>
                    </div>
                    <div className="text-center">
                        <h2 className="text-2xl font-bold text-gray-800 mb-1" id='mainName'></h2>
                        <p className="text-gray-600 text-sm" id='email'>@adventure_john</p>
                        <button className="mt-3 bg-gradient-to-r from-pink-500 to-purple-500 text-white px-6 py-2 rounded-full text-sm font-semibold shadow-lg hover:shadow-xl transition duration-300">
                            <FontAwesomeIcon icon={faUserPlus} className="mr-2" />
                            Edit
                        </button>
                    </div>
                </div>

                <div className="mt-8 space-y-4">
                    <div className="flex justify-around bg-gradient-to-r from-blue-50 to-purple-50 p-4 rounded-xl shadow-sm">
                        <div className="text-center">
                            <FontAwesomeIcon icon={faImages} className="text-blue-500 text-xl mb-1" />
                            <p className="font-bold text-gray-800" id='postCount'>0</p>
                            <p className="text-xs text-gray-500">Posts</p>
                        </div>
                        <div className="text-center">
                            <FontAwesomeIcon icon={faUsers} className="text-purple-500 text-xl mb-1" />
                            <p className="font-bold text-gray-800" id='followersCount'>0</p>
                            <p className="text-xs text-gray-500">Followers</p>
                        </div>
                        <div className="text-center">
                            <FontAwesomeIcon icon={faUser} className="text-pink-500 text-xl mb-1" />
                            <p className="font-bold text-gray-800" id='followingCount'>0</p>
                            <p className="text-xs text-gray-500">Following</p>
                        </div>
                    </div>

                    <div className="bg-white p-4 rounded-lg border border-gray-100 shadow-sm">
                        <p className="text-sm text-gray-600 leading-relaxed" id='bio'>
                        </p>
                    </div>
                    <div className="bg-white p-4 rounded-lg border border-gray-100 shadow-sm">
                        <p className="text-sm text-gray-600 leading-relaxed" id='job'>
                        </p>
                    </div>
                    <div className="bg-white p-4 rounded-lg border border-gray-100 shadow-sm">
                        <p className="text-sm text-gray-600 leading-relaxed" id='dob'>
                        </p>
                    </div>
                </div>
            </div>

            {/* Gallery Section */}
            <div className="w-full lg:w-3/4 p-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 relative" id='contentGallery'>
                     {/*items are appended*/}
                </div>
            </div>
        </div>
        </div>
    );
}

export default AccountPage;

































































    /* eslint-disable no-empty */
/* eslint-disable no-unused-vars */
import 'bootstrap/dist/css/bootstrap.min.css';
import '../CSS/index.css';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faHeart, faComment, faUser, faImages, faUsers, faUserPlus } from '@fortawesome/free-solid-svg-icons';
import StickyNavbar from '../Components/navBar.jsx';
import React,{useState,useEffect} from 'react'
import { useNavigate } from 'react-router-dom';
import UserAccountPersonal from '../Controller/UserAccountPersonal.jsx';

//TODO: use mappings - later
 const UserAccObj = new UserAccountPersonal();

var out3;//gets an array (post content table)
var out1;//gets an array (main post table)
var reaction;

var count = 0;

async function dataFetch(){
    const outPosts = await UserAccObj.getAllPosts();
    console.log('Loading posts..');
    console.log(outPosts); //FIXME: TEST
     out3 = outPosts.out3;//gets an array (post content table)
     out1 = outPosts.out1;//gets an array (main post table)
     reaction = outPosts.reaction;//gets an array of the post reactions
    console.log(out1);//FIXME: test
}
function AccountPage() {
   
    const navigate = useNavigate();
     const navigateToImagePage = (dataObject) => {
        navigate('/ViewAllImages',{state : dataObject});
    }
    UserAccObj.getAccInfo().then(data => {
    document.getElementById('mainName').innerText = data.fname + " " + data.lname;
    document.getElementById('email').innerText = data.email;
    document.getElementById('postCount').innerText = data.postCount;
    document.getElementById('followersCount').innerText = data.followersCount;
    document.getElementById('followingCount').innerText = data.followingCount;
    document.getElementById('bio').innerText = data.bio;
    document.getElementById('job').innerText = "Job: "+data.job;
    document.getElementById('dob').innerText = "Date of birth: "+data.dob;
document.getElementById('profile_pic_url').innerHTML = `
    <img 
        src="${data.profile_pic_url}" 
        alt="Profile" 
        class="w-32 h-32 rounded-full border-4 border-white shadow-xl transform transition duration-300 hover:scale-105"
    />
`;
    });
    //posts
    dataFetch();
     return (
        <div>
            <StickyNavbar></StickyNavbar>
            <div className="min-h-screen bg-gray-50 flex flex-col lg:flex-row">
            {/* Sidebar/Profile Section */}
            <div className="w-full lg:w-1/4 bg-white p-8 shadow-lg lg:min-h-screen">
                <div className="flex flex-col items-center space-y-4">
                    <div className="relative group" id='profile_pic_url'>
                     
                        <div className="absolute inset-0 rounded-full border-2 border-transparent group-hover:border-pink-300 transition-all duration-300"></div>
                    </div>
                    <div className="text-center">
                        <h2 className="text-2xl font-bold text-gray-800 mb-1" id='mainName'></h2>
                        <p className="text-gray-600 text-sm" id='email'>@adventure_john</p>
                        <button className="mt-3 bg-gradient-to-r from-pink-500 to-purple-500 text-white px-6 py-2 rounded-full text-sm font-semibold shadow-lg hover:shadow-xl transition duration-300">
                            <FontAwesomeIcon icon={faUserPlus} className="mr-2" />
                            Edit
                        </button>
                    </div>
                </div>

                <div className="mt-8 space-y-4">
                    <div className="flex justify-around bg-gradient-to-r from-blue-50 to-purple-50 p-4 rounded-xl shadow-sm">
                        <div className="text-center">
                            <FontAwesomeIcon icon={faImages} className="text-blue-500 text-xl mb-1" />
                            <p className="font-bold text-gray-800" id='postCount'>0</p>
                            <p className="text-xs text-gray-500">Posts</p>
                        </div>
                        <div className="text-center">
                            <FontAwesomeIcon icon={faUsers} className="text-purple-500 text-xl mb-1" />
                            <p className="font-bold text-gray-800" id='followersCount'>0</p>
                            <p className="text-xs text-gray-500">Followers</p>
                        </div>
                        <div className="text-center">
                            <FontAwesomeIcon icon={faUser} className="text-pink-500 text-xl mb-1" />
                            <p className="font-bold text-gray-800" id='followingCount'>0</p>
                            <p className="text-xs text-gray-500">Following</p>
                        </div>
                    </div>

                    <div className="bg-white p-4 rounded-lg border border-gray-100 shadow-sm">
                        <p className="text-sm text-gray-600 leading-relaxed" id='bio'>
                        </p>
                    </div>
                    <div className="bg-white p-4 rounded-lg border border-gray-100 shadow-sm">
                        <p className="text-sm text-gray-600 leading-relaxed" id='job'>
                        </p>
                    </div>
                    <div className="bg-white p-4 rounded-lg border border-gray-100 shadow-sm">
                        <p className="text-sm text-gray-600 leading-relaxed" id='dob'>
                        </p>
                    </div>
                </div>
            </div>

            {/* Gallery Section */}
            <div className="w-full lg:w-3/4 p-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 relative" id='contentGallery'>
                    {/** posts are here */}
                </div>
            </div>
        </div>
        </div>
    );
}

export default AccountPage;



















        //const token = jwt.sign({ userId: 123 }, 'your-secret-key', { expiresIn: '1h' });
        //alert(import.meta.env.VITE_CONN_KEY);

















        /* eslint-disable no-unused-vars */
import SockJS from 'sockjs-client';
import { Stomp } from '@stomp/stompjs';
import React,{useState} from 'react';
class webSocketConnect{
    process(){
        var sessionId = "";
        const socket = new SockJS('http://localhost:8020/secured/room', null);
        const stompClient = Stomp.over(socket);
        
        // stompClient.connect({}, (frame) => {
        // const transportUrl = stompClient.current.ws._transport.url;
        
        // let cleanedUrl = transportUrl
        //  .replace("ws://localhost:8020/spring-security-mvc-socket/secured/room/", "")
        //  .replace("/websocket", "")
        //  .replace(/^[0-9]+\//, "");
        //  sessionId.current = cleanedUrl;
        //  console.log("Current WebSocket session:", cleanedUrl);
        // });

        // stompClient.subscribe('secured/user/queue/specific-user' 
        //     + '-user' + sessionId,function (msgOut) {
        //         alert("Message : " + msgOut);//FIXME: TEST
        //  }) 

         stompClient.current.connect({}, (frame) => {
            console.log('Connected: ' + frame);
            
            // Subscribe to public messages
            // stompClient.current.subscribe('/topic/messages', (message) => {
            //     showMessage(JSON.parse(message.body).content);
            // });

            // Subscribe to private messages
            stompClient.current.subscribe('user/secured/user/queue/specific-user/private-messages', (message) => {
                alert(message.body);
            });
        });

    }
}
export default webSocketConnect;